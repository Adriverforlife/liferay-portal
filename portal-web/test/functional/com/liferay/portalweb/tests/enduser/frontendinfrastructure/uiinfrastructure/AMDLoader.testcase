@component-name = "portal-frontend-infrastructure"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "AMD Loader";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@priority = "5"
	test CheckAMDLoaderLogLevel {
		property test.name.skip.portal.instance = "AMDLoader#CheckAMDLoaderLogLevel";

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "Infrastructure",
			configurationName = "JavaScript Loader",
			configurationScope = "System Scope");

		FormFields.viewSelectOption(
			fieldName = "Log Level",
			selectOption = "Warn");

		var logLevel = AMDLoader.getAMDLoaderLogLevel();

		if ("${logLevel}" != "warn") {
			fail("AMD log level isn't set to Warn in JS console.");
		}

		SystemSettings.selectOptionSetting(
			fieldName = "Log Level",
			selectOption = "Off");

		SystemSettings.saveConfiguration();

		Refresh();

		var logLevel = AMDLoader.getAMDLoaderLogLevel();

		if ("${logLevel}" != "off") {
			fail("AMD log level isn't set to Off in JS console.");
		}

		SystemSettings.selectOptionSetting(
			fieldName = "Log Level",
			selectOption = "Error");

		SystemSettings.saveConfiguration();

		Refresh();

		var logLevel = AMDLoader.getAMDLoaderLogLevel();

		if ("${logLevel}" != "error") {
			fail("AMD log level isn't set to Error in JS console.");
		}

		SystemSettings.selectOptionSetting(
			fieldName = "Log Level",
			selectOption = "Info");

		SystemSettings.saveConfiguration();

		Refresh();

		var logLevel = AMDLoader.getAMDLoaderLogLevel();

		if ("${logLevel}" != "info") {
			fail("AMD log level isn't set to Info in JS console.");
		}

		SystemSettings.selectOptionSetting(
			fieldName = "Log Level",
			selectOption = "Debug");

		SystemSettings.saveConfiguration();

		Refresh();

		var logLevel = AMDLoader.getAMDLoaderLogLevel();

		if ("${logLevel}" != "debug") {
			fail("AMD log level isn't set to Debug in JS console.");
		}
	}

}